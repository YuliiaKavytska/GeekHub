{"version":3,"sources":["store/todoReducer.ts","components/Item.tsx","webSocket.js","components/Main.tsx","components/Footer.tsx","store/index.ts","components/Header.tsx","App.jsx","reportWebVitals.js","index.js","components/Header.module.css"],"names":["toDoSlice","createSlice","name","initialState","list","lastTask","countOfActiveTasks","filter","filterResult","error","reducers","setTodos","state","action","payload","e","status","length","changeItemStatus","element","findIndex","id","changeEditing","caseType","item","find","editing","setChangedTask","task","map","changeItemTask","addItem","push","deleteItem","deleteCompleted","changeLastTask","completedAll","every","some","forEach","changeFilter","el","setErrorResponse","ajax","url","method","body","settings","headers","Object","keys","JSON","stringify","fetch","actions","Item","changeEditingCall","changeItemStatusCall","deleteItemCall","changeItemTaskCall","input","React","createRef","currentValue","useCallback","currentTarget","value","changeEditingBlurCase","useEffect","current","focus","className","undefined","onDoubleClick","type","checked","onChange","onClick","onInput","onBlur","ref","socket","io","mapDispatchToProps","getUsersTC","editingMode","dispatch","then","response","resultPromise","json","data","message","connect","toDo","props","useParams","num","edit","Number","on","success","completedAllCall","deleteTodoTC","changeStatusTC","changeTodoTC","htmlFor","completeAll","activeClassName","to","rootReducer","combineReducers","reducer","middleware","getDefaultMiddleware","thunk","store","configureStore","onKey","event","key","addNewTodoTC","Input","text","target","s","header","placeholder","onKeyDown","autoFocus","App","path","render","MainApp","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.21d86c73.chunk.js","sourcesContent":["import {createSlice, PayloadAction, ThunkAction} from '@reduxjs/toolkit'\r\nimport {FilterType, todoType} from \"../types/types\"\r\n\r\nlet initialState = {\r\n    list: [] as Array<todoType>,\r\n    lastTask: '',\r\n    countOfActiveTasks: 0,\r\n    filter: 'all' as FilterType,\r\n    filterResult: [] as Array<todoType>,\r\n    error: null as string | null | undefined\r\n}\r\n\r\ntype StateType = typeof initialState\r\n\r\nexport const toDoSlice = createSlice({\r\n    name: 'list',\r\n    initialState,\r\n    reducers: {\r\n        setTodos: (state: StateType, action: PayloadAction<{ list: Array<todoType>, lastTask: string }>): void => {\r\n            const {list, lastTask} = action.payload\r\n            state.list = list\r\n            state.lastTask = lastTask\r\n            state.filterResult = list\r\n            state.countOfActiveTasks = list.filter((e: todoType) => e.status === 'active').length\r\n            state.error = null\r\n        },\r\n        changeItemStatus: (state: StateType, action: PayloadAction<{ id: number }>): void => {\r\n            const element = state.list.findIndex(e => e.id === action.payload.id)\r\n            if (state.list[element].status === 'active') {\r\n                state.list[element].status = 'completed'\r\n            } else {\r\n                state.list[element].status = 'active'\r\n            }\r\n            state.countOfActiveTasks = state.list.filter(e => e.status === 'active').length\r\n            state.filterResult = state.list\r\n            state.filter = 'all'\r\n            state.error = null\r\n        },\r\n        changeEditing: (state: StateType, action: PayloadAction<{ caseType?: boolean, id: number | null }>): void => {\r\n            const {id, caseType} = action.payload\r\n            const item = state.list.find(e => e.id === id)\r\n            // рассматриваем случай. мы тыкнули в другом месте или сделали двойной клик?\r\n            // если в другом месте, то это false, а если двойной то нулл\r\n            // если мы тыкнули два раза, тогда мы меняем статус редактирования\r\n            // но если мы тыкнули в другом месте то в этом лучаем мы ВСЕГДА просто ВЫКЛЮЧАЕМ редактирование\r\n            if (item) {\r\n                item.editing = caseType && !item.editing\r\n            }\r\n            state.filterResult = state.list\r\n        },\r\n        setChangedTask: (state: StateType, action: PayloadAction<{ id: number, task: string }>): void => {\r\n            const {id, task} = action.payload\r\n            state.list = state.list.map(e => e.id === id ? {...e, task} : e)\r\n            state.filterResult = state.list\r\n        },\r\n        changeItemTask: (state: StateType, action: PayloadAction<{ id: number, task: string }>): void => {\r\n            const {id, task} = action.payload\r\n            const item = state.list.find(e => e.id === id)\r\n            if (item) {\r\n                item.task = task\r\n            }\r\n            state.filterResult = state.list\r\n            state.error = null\r\n        },\r\n        addItem: (state: StateType, action: PayloadAction<{ task: string }>): void => {\r\n            if (state.lastTask) {\r\n                let {task} = action.payload\r\n                const id = state.list.length > 0 ? state.list[state.list.length - 1].id + 1 : 1\r\n                state.list.push({id, task, status: 'active', editing: false})\r\n                state.lastTask = ''\r\n                state.countOfActiveTasks += 1\r\n                state.filterResult = state.list\r\n                state.filter = 'all'\r\n            }\r\n            state.error = null\r\n        },\r\n        deleteItem: (state: StateType, action: PayloadAction<{ id: number }>): void => {\r\n            state.list = state.list.filter(e => e.id !== action.payload.id)\r\n            state.countOfActiveTasks = state.list.filter(e => e.status === 'active').length\r\n            state.filterResult = state.list\r\n            state.filter = 'all'\r\n            state.error = null\r\n        },\r\n        deleteCompleted: (state: StateType): void => {\r\n            state.list = state.list.filter(e => e.status !== 'completed')\r\n            state.filterResult = state.list\r\n            state.error = null\r\n        },\r\n        changeLastTask: (state: StateType, action: PayloadAction<{ task: string }>): void => {\r\n            state.lastTask = action.payload.task\r\n            state.error = null\r\n        },\r\n        completedAll: (state: StateType): void => {\r\n            const foundActive = state.list.every(item => item.status === 'active') ||\r\n                state.list.some(item => item.status === 'active')\r\n            if (foundActive) {\r\n                state.list.forEach((item) => {\r\n                    item.status = 'completed'\r\n                })\r\n                state.countOfActiveTasks = 0\r\n            } else {\r\n                state.list.forEach((item) => {\r\n                    item.status = 'active'\r\n                })\r\n                state.countOfActiveTasks = state.list.length\r\n            }\r\n            state.filterResult = state.list\r\n            state.error = null\r\n        },\r\n        changeFilter: (state: StateType, action: PayloadAction<{ filter: FilterType, id: number | null }>): void => {\r\n            switch (action.payload.filter) {\r\n                case 'all' :\r\n                    state.filterResult = state.list\r\n                    state.filter = 'all'\r\n                    break\r\n                case 'active' :\r\n                    state.filterResult = state.list.filter(el => el.status !== 'completed')\r\n                    state.filter = 'active'\r\n                    break\r\n                case 'completed' :\r\n                    state.filterResult = state.list.filter(el => el.status !== 'active')\r\n                    state.filter = 'completed'\r\n                    break\r\n                case 'item' :\r\n                    state.filterResult = state.list.filter(el => el.id === action.payload.id)\r\n                    state.filter = 'all'\r\n                    break\r\n                default:\r\n                    return\r\n            }\r\n            state.countOfActiveTasks = state.list.filter(el => el.status === 'active').length\r\n            state.error = null\r\n        },\r\n        setErrorResponse: (state: StateType, action: PayloadAction<{ error: string | null | undefined }>): void => {\r\n            state.error = action.payload.error\r\n        }\r\n    }\r\n})\r\n\r\nexport const getUsersTC = (filter: FilterType, id: null | number = null, editingMode: boolean | null = null):\r\n    ThunkAction<void, StateType, unknown, any> => (dispatch) => {\r\n    ajax('/api/all', 'GET').then(response => {\r\n        const resultPromise = response.json()\r\n        if (response.status === 200) {\r\n            resultPromise.then(data => {\r\n                dispatch(setTodos({list: data.list, lastTask: data.lastTask}))\r\n                dispatch(changeFilter({filter, id}))\r\n                if (editingMode) {\r\n                    dispatch(changeEditing({id}))\r\n                }\r\n            })\r\n        } else {\r\n            resultPromise.then(data => {\r\n                dispatch(setErrorResponse({error: data.message}))\r\n            })\r\n        }\r\n    })\r\n}\r\n\r\nexport const updateLastMessageTC = (text: string): void => {\r\n    ajax('/api/lastTask', 'PUT', {text})\r\n}\r\n\r\nexport const completeAllTC = (): void => {\r\n    ajax('/api/completeAll', 'GET')\r\n}\r\n\r\nexport const changeStatusTC = (id: number): void => {\r\n    ajax('/api/changeTodo', 'PUT', {id})\r\n}\r\n\r\nexport const deleteTodoTC = (id: number): void => {\r\n    ajax('/api/changeTodo', 'DELETE', {id})\r\n}\r\n\r\nexport const addNewTodoTC = (lastTask: string): void => {\r\n    ajax('/api/newTodo', 'POST', {task: lastTask})\r\n}\r\n\r\nexport const deleteCompletedTC = (): void => {\r\n    ajax('/api/deleteCompleted', 'DELETE')\r\n}\r\n\r\nexport const changeTodoTC = (id: number, task: string): void => {\r\n    ajax('/api/changeTodo', 'POST', {id, task})\r\n}\r\n\r\ntype HttpMethodsType = 'GET' | 'PUT' | 'POST' | 'DELETE'\r\n\r\ninterface SettingsType {\r\n    method: HttpMethodsType\r\n    headers: { \"X-Requested-With\": \"XMLHttpRequest\", \"Content-Type\": \"application/json\" }\r\n\r\n    [body: string]: { [key: string]: string | number } | string\r\n}\r\n\r\nlet ajax = (url: string, method: HttpMethodsType, body = {}): Promise<Response> => {\r\n    let settings: SettingsType = {\r\n        method,\r\n        headers: {\"X-Requested-With\": \"XMLHttpRequest\", \"Content-Type\": \"application/json\"}\r\n    }\r\n    if (Object.keys(body).length !== 0) {\r\n        settings['body'] = JSON.stringify(body)\r\n    }\r\n    return fetch(url, settings)\r\n}\r\n\r\nexport const {\r\n    setTodos,\r\n    changeItemStatus,\r\n    changeItemTask,\r\n    changeEditing,\r\n    setChangedTask,\r\n    addItem,\r\n    deleteItem,\r\n    deleteCompleted,\r\n    changeLastTask,\r\n    completedAll,\r\n    changeFilter,\r\n    setErrorResponse\r\n} = toDoSlice.actions\r\n","import React, {ChangeEvent, useCallback, useEffect} from 'react'\r\nimport {todoType} from \"../types/types\"\r\n\r\ninterface PropsType {\r\n    item: todoType\r\n    changeEditingCall: (id: number, caseType: boolean | undefined, task: string, editing: boolean | undefined) => void\r\n    changeItemStatusCall: (id: number) => void\r\n    deleteItemCall: (id: number) => void\r\n    changeItemTaskCall: (id: number, task: string) => void\r\n}\r\n\r\nconst Item: React.FC<PropsType> = ({item, changeEditingCall, changeItemStatusCall, deleteItemCall, changeItemTaskCall}) => {\r\n    const input = React.createRef<HTMLInputElement>()\r\n    let currentValue: string = item.task\r\n\r\n    const changeEditing = useCallback((): void => {\r\n        changeEditingCall(item.id, true, currentValue, item.editing)\r\n    }, [changeEditingCall, item])\r\n\r\n    const changeItemStatus = useCallback((): void => {\r\n        changeItemStatusCall(item.id)\r\n    }, [changeItemStatusCall, item])\r\n\r\n    const deleteItem = useCallback((): void => {\r\n        deleteItemCall(item.id)\r\n    }, [deleteItemCall, item])\r\n\r\n    const changeItemTask = useCallback((e: ChangeEvent<HTMLInputElement>): void => {\r\n        changeItemTaskCall(item.id, e.currentTarget.value)\r\n        currentValue = e.currentTarget.value\r\n    }, [changeItemTaskCall, item])\r\n\r\n    const changeEditingBlurCase = useCallback((e: React.FocusEvent<HTMLInputElement>): void => {\r\n        // это случай нажатия в другом месте.\r\n        changeEditingCall(item.id, false, e.currentTarget.value, item.editing)\r\n    }, [changeEditingCall, item])\r\n\r\n    useEffect((): void => {\r\n        if (input.current) {\r\n            input.current.focus()\r\n        }\r\n    }, [input])\r\n\r\n    return <li className={item.status === 'completed'\r\n        ? (item.editing ? 'completed editing' : 'completed')\r\n        : (item.editing ? 'editing' : undefined)}\r\n               onDoubleClick={changeEditing}>\r\n        <div className=\"view\">\r\n            <input className=\"toggle\"\r\n                   type=\"checkbox\"\r\n                   checked={item.status === \"completed\"}\r\n                   onChange={changeItemStatus}\r\n            />\r\n            <label>{item.task}</label>\r\n            <button className=\"destroy\" onClick={deleteItem}></button>\r\n        </div>\r\n        <input className=\"edit\"\r\n               value={item.task}\r\n               onInput={changeItemTask}\r\n               onBlur={changeEditingBlurCase}\r\n               ref={input}\r\n        />\r\n    </li>\r\n}\r\n\r\nexport default Item","import io from \"socket.io-client\";\r\n\r\nconst socket = io(\"http://localhost:8000/\"); // для подключения к сеерверу\r\n\r\nexport default socket;","import React, {useCallback, useEffect} from 'react'\r\nimport {\r\n    changeEditing,\r\n    changeItemStatus,\r\n    changeItemTask,\r\n    changeStatusTC,\r\n    changeTodoTC,\r\n    completeAllTC,\r\n    completedAll,\r\n    deleteItem,\r\n    deleteTodoTC,\r\n    getUsersTC,\r\n    setChangedTask,\r\n    setErrorResponse\r\n} from \"../store/todoReducer\"\r\nimport {connect} from \"react-redux\"\r\nimport {useParams} from 'react-router-dom'\r\nimport Item from \"./Item\"\r\nimport socket from \"../webSocket\"\r\nimport {StateType} from \"../store\"\r\nimport {FilterType, mainRespType, todoType} from \"../types/types\"\r\n\r\ninterface IUri {\r\n    filter: FilterType\r\n    num: string\r\n    edit: 'edit'\r\n}\r\n\r\nconst Main: React.FC<PropsType> = (props) => {\r\n    const {\r\n        filterResult, changeEditing, changeItemStatus, changeItemTask,\r\n        completedAll, deleteItem, setChangedTask, setErrorResponse, getUsersTC\r\n    } = props\r\n\r\n    const {filter, num, edit} = useParams<IUri>()\r\n\r\n    useEffect((): void => {\r\n        switch (filter) {\r\n            case 'todo':\r\n                if (num && !edit) {\r\n                    getUsersTC('item', Number(num))\r\n                } else if (num && edit) {\r\n                    getUsersTC('item', Number(num), true)\r\n                } else {\r\n                    getUsersTC('all')\r\n                }\r\n                break\r\n            case undefined:\r\n                getUsersTC('all')\r\n                break\r\n            default:\r\n                getUsersTC(filter)\r\n        }\r\n    }, [edit, num, filter])\r\n\r\n    useEffect((): void => {\r\n        socket.on('all:wasCompleted', ({success, ...data}: Omit<mainRespType, 'task' | 'id'>) => {\r\n            if (success) {\r\n                completedAll()\r\n            } else {\r\n                setErrorResponse({error: data.message})\r\n            }\r\n        })\r\n\r\n        socket.on('todo:wasDeleted', ({id, success, ...data}: Omit<mainRespType, 'task'>) => {\r\n            if (success) {\r\n                deleteItem({id})\r\n            } else {\r\n                setErrorResponse({error: data.message})\r\n            }\r\n        })\r\n\r\n        socket.on('todoStatus:wasChanged', ({id, success, ...data}: Omit<mainRespType, 'task'>) => {\r\n            if (success) {\r\n                changeItemStatus({id})\r\n            } else {\r\n                setErrorResponse({error: data.message})\r\n            }\r\n        })\r\n\r\n        socket.on('todo:wasChanged', ({success, id, task, ...data}: mainRespType) => {\r\n            if (success) {\r\n                setChangedTask({id, task})\r\n            } else {\r\n                setErrorResponse({error: data.message})\r\n            }\r\n        })\r\n    }, [])\r\n\r\n    const completedAllCall = useCallback((): void => {\r\n        completeAllTC()\r\n    }, [])\r\n\r\n    const deleteItemCall = useCallback((id: number): void => {\r\n        deleteTodoTC(id)\r\n    }, [])\r\n\r\n    const changeItemStatusCall = useCallback((id: number): void => {\r\n        changeStatusTC(id)\r\n    }, [])\r\n\r\n    const changeEditingCall = useCallback((id: number, caseType: boolean | undefined,\r\n                                           task: string, editing: boolean | undefined): void => {\r\n        // мы передаем статус редактирования (editing), чтобы понять, мы его в данный момент выключаем или включаем\r\n        // если мы его включаем тогда просто меняем статус редактирования (на влючено)\r\n        //  но если мы его выключаем то тогда мы делаем запрос на изменения данных на сервере (сохранение)\r\n        if (editing) {\r\n            changeTodoTC(id, task)\r\n            // выключаем редактирование у себя\r\n            changeEditing({id, caseType})\r\n        } else {\r\n            changeEditing({id, caseType})\r\n        }\r\n    }, [])\r\n\r\n    const changeItemTaskCall = useCallback((id: number, task: string): void => {\r\n        changeItemTask({id, task})\r\n    }, [])\r\n\r\n    return <section className=\"main\">\r\n        <input id=\"toggle-all\"\r\n               className=\"toggle-all\"\r\n               type=\"checkbox\"\r\n               onClick={completedAllCall}\r\n        />\r\n        <label htmlFor=\"toggle-all\"> Mark all as complete</label>\r\n        <ul className=\"todo-list\">\r\n            {filterResult.map((item: todoType) => (\r\n                <Item key={item.id}\r\n                      item={item}\r\n                      changeEditingCall={changeEditingCall}\r\n                      changeItemStatusCall={changeItemStatusCall}\r\n                      deleteItemCall={deleteItemCall}\r\n                      changeItemTaskCall={changeItemTaskCall}/>\r\n            ))}\r\n        </ul>\r\n    </section>\r\n}\r\n\r\nconst mapStateToProps = (state: StateType) => ({\r\n    filterResult: state.toDo.filterResult\r\n})\r\ntype StateToProps = ReturnType<typeof mapStateToProps>\r\n\r\nconst mapDispatchToProps = {\r\n    changeEditing, changeItemStatus, changeItemTask,\r\n    completedAll, deleteItem, setChangedTask, setErrorResponse, getUsersTC\r\n}\r\n\r\ntype DispatchToPropsType = Omit<typeof mapDispatchToProps, 'getUsersTC'> &\r\n    { getUsersTC: (filter: FilterType, id?: number, editingMode?: boolean) => void }\r\n\r\ntype PropsType = StateToProps & DispatchToPropsType\r\n\r\nexport default connect<StateToProps, DispatchToPropsType, null, StateType>(mapStateToProps, mapDispatchToProps)(Main)","import React, {useCallback, useEffect} from 'react'\r\nimport {connect} from \"react-redux\"\r\nimport {deleteCompleted, deleteCompletedTC, setErrorResponse} from \"../store/todoReducer\"\r\nimport {NavLink} from \"react-router-dom\"\r\nimport socket from \"../webSocket\"\r\nimport {mainRespType} from '../types/types'\r\nimport {StateType} from \"../store\"\r\n\r\nconst Footer: React.FC<PropsType> = (props) => {\r\n    let {countOfActiveTasks, deleteCompleted, setErrorResponse} = props\r\n\r\n    useEffect((): void => {\r\n        socket.on('completed:wasDeleted', ({success, ...data}: Omit<mainRespType, 'id' | 'task'>) => {\r\n            if (success) {\r\n                deleteCompleted()\r\n            } else {\r\n                setErrorResponse({error: data.message})\r\n            }\r\n        })\r\n    }, [])\r\n\r\n    const completeAll = useCallback((): void => {\r\n        deleteCompletedTC()\r\n    }, [])\r\n\r\n    return <footer className=\"footer\">\r\n        <span className=\"todo-count\"><strong>{countOfActiveTasks}</strong> item left</span>\r\n        <ul className=\"filters\">\r\n            <li><NavLink activeClassName=\"selected\" to='/todo'>All</NavLink></li>\r\n            <li><NavLink activeClassName=\"selected\" to='/active'>Active</NavLink></li>\r\n            <li><NavLink activeClassName=\"selected\" to='/completed'>Completed</NavLink></li>\r\n        </ul>\r\n        <button className=\"clear-completed\" onClick={completeAll}>Clear completed</button>\r\n    </footer>\r\n}\r\n\r\nconst mapStateToProps = (state: StateType) => ({\r\n    countOfActiveTasks: state.toDo.countOfActiveTasks\r\n})\r\n\r\nconst mapDispatchToProps = {deleteCompleted, setErrorResponse}\r\n\r\ntype DispatchToPropsType = typeof mapDispatchToProps\r\ntype StateToPropsType = ReturnType<typeof mapStateToProps>\r\ntype PropsType = StateToPropsType & DispatchToPropsType\r\n\r\nexport default connect<StateToPropsType, DispatchToPropsType, null, StateType>(\r\n    mapStateToProps, mapDispatchToProps)(Footer)\r\n","import {combineReducers, configureStore, getDefaultMiddleware} from '@reduxjs/toolkit'\r\nimport {toDoSlice} from \"./todoReducer\"\r\n\r\nconst rootReducer = combineReducers({\r\n    toDo: toDoSlice.reducer,\r\n})\r\n\r\nconst middleware = getDefaultMiddleware({thunk: true})\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware\r\n})\r\n\r\nexport type StateType = ReturnType<typeof store.getState>\r\nexport type DispatchType = typeof store.dispatch","import React, {ChangeEvent, useCallback, useEffect} from \"react\"\r\nimport {connect} from \"react-redux\"\r\nimport {addItem, addNewTodoTC, changeLastTask, setErrorResponse, updateLastMessageTC} from \"../store/todoReducer\"\r\nimport s from './Header.module.css'\r\nimport socket from \"../webSocket\"\r\nimport {StateType} from \"../store\"\r\nimport {mainRespType} from \"../types/types\"\r\n\r\nconst Header: React.FC<PropsType> = (props) => {\r\n    const {addItem, changeLastTask, setErrorResponse, lastTask, error} = props\r\n\r\n    useEffect((): void => {\r\n        socket.on('newTodo:wasChanged', ({task, success, ...data}: Omit<mainRespType, 'id'>): void => {\r\n            if (success) {\r\n                changeLastTask({task})\r\n            } else {\r\n                setErrorResponse({error: data.message})\r\n            }\r\n        })\r\n\r\n        socket.on('newTodo:wasAdded', ({success, task, ...data}: Omit<mainRespType, 'id'>): void => {\r\n            if (success) {\r\n                addItem({task})\r\n            } else {\r\n                setErrorResponse({error: data.message})\r\n            }\r\n        })\r\n    }, [])\r\n\r\n    const onKey = useCallback((event: React.KeyboardEvent<HTMLInputElement>): void => {\r\n        if (event.key === \"Enter\") {\r\n            addNewTodoTC(lastTask)\r\n        }\r\n    }, [lastTask])\r\n\r\n    const Input = useCallback((event: ChangeEvent<HTMLInputElement>): void => {\r\n        updateLastMessageTC(event.target.value)\r\n    }, [])\r\n\r\n    return <header className={`header ${s.header}`}>\r\n        <h1>todos</h1>\r\n        {error && <p className={s.error}>Server error: {error}</p>}\r\n        <input className=\"new-todo\"\r\n               placeholder=\"What needs to be done?\"\r\n               value={lastTask}\r\n               onInput={Input}\r\n               onKeyDown={onKey}\r\n               autoFocus\r\n        />\r\n    </header>\r\n}\r\n\r\nconst mapStateToProps = (state: StateType) => ({\r\n    lastTask: state.toDo.lastTask,\r\n    error: state.toDo.error\r\n})\r\n\r\nconst mapDispatchToProps = {addItem, changeLastTask, setErrorResponse}\r\n\r\ntype StatePropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = typeof mapDispatchToProps\r\ntype PropsType = StatePropsType & DispatchPropsType\r\n\r\nexport default connect<StatePropsType, DispatchPropsType, null, StateType>(\r\n    mapStateToProps, mapDispatchToProps)(Header)\r\n\r\n","import React from \"react\";\r\nimport './css/index.css';\r\nimport './css/base.css';\r\nimport Main from \"./components/Main\";\r\nimport Footer from \"./components/Footer\";\r\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./store\";\r\nimport Header from \"./components/Header\";\r\n\r\n\r\nconst App = () => {\r\n    return <section className=\"todoapp\">\r\n        <Header/>\r\n        <Route path={'/:filter(active|all|completed|todo)?/:num?/:edit?'} render={() => <Main/>}/>\r\n        <Footer/>\r\n    </section>\r\n}\r\n\r\n\r\nconst MainApp = () => {\r\n    return <Router>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </Router>\r\n}\r\n\r\nexport default MainApp;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport MainApp from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <MainApp/>,\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"Header_error__1X_7W\",\"header\":\"Header_header__h8UIr\"};"],"sourceRoot":""}