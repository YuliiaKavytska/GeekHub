{"version":3,"sources":["store/todoReducer.ts","components/Item.tsx","webSocket.js","components/Main.tsx","components/Footer.tsx","store/index.ts","components/Header.tsx","App.jsx","reportWebVitals.js","index.js","components/Header.module.css"],"names":["toDoSlice","createSlice","name","initialState","list","lastTask","countOfActiveTasks","filter","filterResult","error","reducers","setTodos","state","action","payload","e","status","length","changeItemStatus","element","findIndex","id","changeEditing","case","editing","setChangedTask","map","task","changeItemTask","addItem","push","deleteItem","deleteCompleted","changeLastTask","completedAll","every","item","some","forEach","changeFilter","el","setErrorResponse","completeAllTC","ajax","changeStatusTC","deleteTodoTC","changeTodoTC","url","method","body","settings","headers","Object","keys","JSON","stringify","fetch","actions","Item","changeEditingCall","changeItemStatusCall","deleteItemCall","changeItemTaskCall","input","React","createRef","useCallback","currentTarget","value","changeEditingBlurCase","useEffect","current","focus","className","undefined","type","checked","onChange","onClick","onInput","onBlur","ref","onDoubleClick","socket","io","mapDispatchToProps","getUsersTC","editingMode","dispatch","then","response","resultPromise","json","data","message","connect","toDo","props","useParams","num","edit","Number","on","success","completedAllCall","itemCase","htmlFor","completeAll","activeClassName","to","rootReducer","combineReducers","reducer","middleware","getDefaultMiddleware","thunk","store","configureStore","useDispatch","onKey","event","key","addNewTodoTC","Input","text","target","s","header","placeholder","onKeyDown","autoFocus","App","path","render","MainApp","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById","module","exports"],"mappings":"yLAcaA,EAAYC,YAAY,CACjCC,KAAM,OACNC,aAbe,CACfC,KAAM,GACNC,SAAU,GACVC,mBAAoB,EACpBC,OAAQ,MACRC,aAAc,GACdC,MAAO,MAQPC,SAAU,CACNC,SAAU,SAACC,EAAkBC,GACzBD,EAAMR,KAAOS,EAAOC,QAAQV,KAC5BQ,EAAMP,SAAWQ,EAAOC,QAAQT,SAChCO,EAAMJ,aAAeK,EAAOC,QAAQV,KACpCQ,EAAMN,mBAAqBO,EAAOC,QAAQV,KAAKG,QAAO,SAACQ,GAAD,MAA8B,WAAbA,EAAEC,UAAqBC,OAC9FL,EAAMH,MAAQ,MAElBS,iBAAkB,SAACN,EAAkBC,GACjC,IAAIM,EAAUP,EAAMR,KAAKgB,WAAU,SAAAL,GAAC,OAAIA,EAAEM,KAAOR,EAAOC,QAAQO,MACjC,WAA/BT,EAAMR,KAAKe,GAASH,OACdJ,EAAMR,KAAKe,GAASH,OAAS,YAC7BJ,EAAMR,KAAKe,GAASH,OAAS,SACnCJ,EAAMN,mBAAqBM,EAAMR,KAAKG,QAAO,SAAAQ,GAAC,MAAiB,WAAbA,EAAEC,UAAqBC,OACzEL,EAAMJ,aAAeI,EAAMR,KAC3BQ,EAAML,OAAS,MACfK,EAAMH,MAAQ,MAElBa,cAAe,SAACV,EAAkBC,GAC9B,IAAIM,EAAUP,EAAMR,KAAKgB,WAAU,SAAAL,GAAC,OAAIA,EAAEM,KAAOR,EAAOC,QAAQO,OAKxC,IAAxBR,EAAOC,QAAQS,KACTX,EAAMR,KAAKe,GAASK,SAAU,EAC9BZ,EAAMR,KAAKe,GAASK,SAAWZ,EAAMR,KAAKe,GAASK,QACzDZ,EAAMJ,aAAeI,EAAMR,MAE/BqB,eAAgB,SAACb,EAAkBC,GAC/BD,EAAMR,KAAOQ,EAAMR,KAAKsB,KAAI,SAAAX,GAAC,OAAIA,EAAEM,KAAOR,EAAOC,QAAQO,GAAxB,2BAAiCN,GAAjC,IAAoCY,KAAMd,EAAOC,QAAQa,OAAQZ,KAClGH,EAAMJ,aAAeI,EAAMR,MAE/BwB,eAAgB,SAAChB,EAAkBC,GAC/B,IAAIM,EAAUP,EAAMR,KAAKgB,WAAU,SAAAL,GAAC,OAAIA,EAAEM,KAAOR,EAAOC,QAAQO,MAChET,EAAMR,KAAKe,GAASQ,KAAOd,EAAOC,QAAQa,KAC1Cf,EAAMJ,aAAeI,EAAMR,KAC3BQ,EAAMH,MAAQ,MAElBoB,QAAS,SAACjB,EAAkBC,GACxB,GAAuB,KAAnBD,EAAMP,SAAiB,CACvB,IAAIgB,EAAKT,EAAMR,KAAKa,OAAS,EAAIL,EAAMR,KAAKQ,EAAMR,KAAKa,OAAS,GAAGI,GAAK,EAAI,EAC5ET,EAAMR,KAAK0B,KAAK,CAACT,GAAIA,EAAIM,KAAMd,EAAOC,QAAQa,KAAMX,OAAQ,SAAUQ,SAAS,IAC/EZ,EAAMP,SAAW,GACjBO,EAAMN,oBAAsB,EAC5BM,EAAMJ,aAAeI,EAAMR,KAC3BQ,EAAML,OAAS,MAEnBK,EAAMH,MAAQ,MAElBsB,WAAY,SAACnB,EAAkBC,GAC3BD,EAAMR,KAAOQ,EAAMR,KAAKG,QAAO,SAAAQ,GAAC,OAAIA,EAAEM,KAAOR,EAAOC,QAAQO,MAC5DT,EAAMN,mBAAqBM,EAAMR,KAAKG,QAAO,SAAAQ,GAAC,MAAiB,WAAbA,EAAEC,UAAqBC,OACzEL,EAAMJ,aAAeI,EAAMR,KAC3BQ,EAAML,OAAS,MACfK,EAAMH,MAAQ,MAElBuB,gBAAiB,SAACpB,GACdA,EAAMR,KAAOQ,EAAMR,KAAKG,QAAO,SAAAQ,GAAC,MAAiB,cAAbA,EAAEC,UACtCJ,EAAMJ,aAAeI,EAAMR,KAC3BQ,EAAMH,MAAQ,MAElBwB,eAAgB,SAACrB,EAAkBC,GAC/BD,EAAMP,SAAWQ,EAAOC,QAAQa,KAChCf,EAAMH,MAAQ,MAElByB,aAAc,SAACtB,GACPA,EAAMR,KAAK+B,OAAM,SAAAC,GAAI,MAAoB,WAAhBA,EAAKpB,WAC9BJ,EAAMR,KAAKiC,MAAK,SAAAD,GAAI,MAAoB,WAAhBA,EAAKpB,WAC7BJ,EAAMR,KAAKkC,SAAQ,SAACF,GAChBA,EAAKpB,OAAS,eAElBJ,EAAMN,mBAAqB,IAE3BM,EAAMR,KAAKkC,SAAQ,SAACF,GAChBA,EAAKpB,OAAS,YAElBJ,EAAMN,mBAAqBM,EAAMR,KAAKa,QAE1CL,EAAMJ,aAAeI,EAAMR,KAC3BQ,EAAMH,MAAQ,MAElB8B,aAAc,SAAC3B,EAAkBC,GAC7B,OAAQA,EAAOC,QAAQP,QACnB,IAAK,MACDK,EAAMJ,aAAeI,EAAMR,KAC3BQ,EAAML,OAAS,MACf,MACJ,IAAK,SACDK,EAAMJ,aAAeI,EAAMR,KAAKG,QAAO,SAAAiC,GAAE,MAAkB,cAAdA,EAAGxB,UAChDJ,EAAML,OAAS,SACf,MACJ,IAAK,YACDK,EAAMJ,aAAeI,EAAMR,KAAKG,QAAO,SAAAiC,GAAE,MAAkB,WAAdA,EAAGxB,UAChDJ,EAAML,OAAS,YACf,MACJ,IAAK,OACDK,EAAMJ,aAAeI,EAAMR,KAAKG,QAAO,SAAAiC,GAAE,OAAIA,EAAGnB,KAAOR,EAAOC,QAAQO,MACtET,EAAML,OAAS,MACf,MACJ,QACI,OAERK,EAAMN,mBAAqBM,EAAMR,KAAKG,QAAO,SAAAiC,GAAE,MAAkB,WAAdA,EAAGxB,UAAqBC,OAC3EL,EAAMH,MAAQ,MAElBgC,iBAAkB,SAAC7B,EAAkBC,GACjCD,EAAMH,MAAQI,EAAOC,QAAQL,UA8B5BiC,EAAgB,WACzBC,EAAK,mBAAoB,QAGhBC,EAAiB,SAACvB,GAC3BsB,EAAK,kBAAmB,MAAO,CAACtB,QAGvBwB,EAAe,SAACxB,GACzBsB,EAAK,kBAAmB,SAAU,CAACtB,QAW1ByB,EAAe,SAACzB,EAAYM,GACrCgB,EAAK,kBAAmB,OAAQ,CAACtB,KAAIM,UAYrCgB,EAAO,SAACI,EAAaC,GAA2D,IAAlCC,EAAiC,uDAA1B,GACjDC,EAAyB,CACzBF,SACAG,QAAS,CAAC,mBAAoB,iBAAkB,eAAgB,qBAGpE,OADiC,IAA7BC,OAAOC,KAAKJ,GAAMhC,SAAciC,EAAQ,KAAWI,KAAKC,UAAUN,IAC/DO,MAAMT,EAAKG,I,EAgBlBlD,EAAUyD,QAZV9C,E,EAAAA,SACAO,E,EAAAA,iBACAU,E,EAAAA,eACAN,E,EAAAA,cACAG,E,EAAAA,eACAI,E,EAAAA,QACAE,E,EAAAA,WACAC,E,EAAAA,gBACAC,E,EAAAA,eACAC,E,EAAAA,aACAK,E,EAAAA,aACAE,E,EAAAA,iB,sBCnJWiB,EAlDmB,SAAC,GAAyF,IAAxFtB,EAAuF,EAAvFA,KAAMuB,EAAiF,EAAjFA,kBAAmBC,EAA8D,EAA9DA,qBAAsBC,EAAwC,EAAxCA,eAAgBC,EAAwB,EAAxBA,mBACzFC,EAAQC,IAAMC,YAEd3C,EAAgB4C,uBAAY,SAACnD,GAC/B4C,EAAkBvB,EAAKf,GAAI,KAAMN,EAAEoD,cAAcC,MAAOhC,EAAKZ,WAC9D,CAACmC,EAAmBvB,IAEjBlB,EAAmBgD,uBAAY,WACjCN,EAAqBxB,EAAKf,MAC3B,CAACuC,EAAsBxB,IAEpBL,EAAamC,uBAAY,WAC3BL,EAAezB,EAAKf,MACrB,CAACwC,EAAgBzB,IAEdR,EAAiBsC,uBAAY,SAACnD,GAChC+C,EAAmB1B,EAAKf,GAAIN,EAAEoD,cAAcC,SAC7C,CAACN,EAAoB1B,IAElBiC,EAAwBH,uBAAY,SAACnD,GAEvC4C,EAAkBvB,EAAKf,IAAI,EAAON,EAAEoD,cAAcC,MAAOhC,EAAKZ,WAC/D,CAACmC,EAAmBvB,IAMvB,OAJAkC,qBAAU,WACFP,EAAMQ,SAASR,EAAMQ,QAAQC,UAClC,CAACT,IAEG,qBAAIU,UAA2B,cAAhBrC,EAAKpB,OACpBoB,EAAKZ,QAAU,oBAAsB,YACrCY,EAAKZ,QAAU,eAAYkD,EAF3B,UAGH,sBAAKD,UAAU,OAAf,UACI,uBAAOA,UAAU,SACVE,KAAK,WACLC,QAAyB,cAAhBxC,EAAKpB,OACd6D,SAAU3D,IAEjB,gCAAQkB,EAAKT,OACb,wBAAQ8C,UAAU,UAAUK,QAAS/C,OAEzC,uBAAO0C,UAAU,OACVL,MAAOhC,EAAKT,KACZoD,QAASnD,EACToD,OAAQX,EACRY,IAAKlB,EACLmB,cAAe5D,Q,QCpDf6D,E,MAFAC,GAAG,0BC2IZC,EAAqB,CACvB/D,gBAAeJ,mBAAkBU,iBACjCgB,iBAAgBE,eAAcJ,gBAAeG,eAAcyC,WHb3D,SAAC/E,GAAD,IACCc,EADD,uDACqB,KACpBkE,EAFD,uDAE+B,KAF/B,OAGI,SAACC,GACG7C,EAAK,WAAY,OAAO8C,MAAK,SAAAC,GACzB,IAAMC,EAAgBD,EAASE,OACP,MAApBF,EAAS1E,OACT2E,EAAcF,MAAK,SAAAI,GACfL,EAAS7E,EAAS,CAACP,KAAMyF,EAAKzF,KAAMC,SAAUwF,EAAKxF,YACnDmF,EAASjD,EAAa,CAAChC,SAAQc,QAC3BkE,GAAaC,EAASlE,EAAc,CAACD,WAG7CsE,EAAcF,MAAK,SAAAI,GACfL,EAAS/C,EAAiB,CAAChC,MAAOoF,EAAKC,mBGA3D5D,eAAcH,aAAYN,iBAAgBgB,oBAoB/BsD,eA5BS,SAACnF,GAAD,MAAqC,CACzDJ,aAAcI,EAAMoF,KAAKxF,gBA2B+D6E,EAA7EU,EAxImB,SAACE,GAAW,IAEtCzF,EAEAyF,EAFAzF,aAAcc,EAEd2E,EAFc3E,cAAeJ,EAE7B+E,EAF6B/E,iBAAkBU,EAE/CqE,EAF+CrE,eAC/CM,EACA+D,EADA/D,aAAcH,EACdkE,EADclE,WAAYuD,EAC1BW,EAD0BX,WAAY7D,EACtCwE,EADsCxE,eAAgBgB,EACtDwD,EADsDxD,iBAHjB,EAMbyD,cAArB3F,EANkC,EAMlCA,OAAQ4F,EAN0B,EAM1BA,IAAKC,EANqB,EAMrBA,KAEpB9B,qBAAU,WACN,OAAQ/D,GACJ,IAAK,OACG4F,IAAQC,EACRd,EAAW,OAAQe,OAAOF,IACnBA,GAAOC,EACdd,EAAW,OAAQe,OAAOF,IAAM,GAEhCb,EAAW,OAEf,MACJ,UAAKZ,EACDY,EAAW,OACX,MACJ,QACIA,EAAW/E,MAEpB,CAAC6F,EAAMD,EAAK5F,IAEf+D,qBAAU,WACNa,EAAOmB,GAAG,oBAAoB,YAA4D,IAA1DC,EAAyD,EAAzDA,QAAYV,EAA6C,2BACrFU,EACMrE,IACAO,EAAiB,CAAChC,MAAOoF,EAAKC,aAGxCX,EAAOmB,GAAG,mBAAmB,YAAyD,IAAvDjF,EAAsD,EAAtDA,GAAIkF,EAAkD,EAAlDA,QAAYV,EAAsC,gCACjFU,EACMxE,EAAW,CAACV,OACZoB,EAAiB,CAAChC,MAAOoF,EAAKC,aAGxCX,EAAOmB,GAAG,yBAAyB,YAAyD,IAAvDjF,EAAsD,EAAtDA,GAAIkF,EAAkD,EAAlDA,QAAYV,EAAsC,gCACvFU,EACMrF,EAAiB,CAACG,OAClBoB,EAAiB,CAAChC,MAAOoF,EAAKC,aAGxCX,EAAOmB,GAAG,mBAAmB,YAAiD,IAA/CC,EAA8C,EAA9CA,QAASlF,EAAqC,EAArCA,GAAIM,EAAiC,EAAjCA,KAASkE,EAAwB,uCACzEU,EACM9E,EAAe,CAACJ,KAAIM,SACpBc,EAAiB,CAAChC,MAAOoF,EAAKC,eAEzC,IAEH,IAAMU,EAAmBtC,uBAAY,WACjCxB,MACD,IAEGmB,EAAiBK,uBAAY,SAAC7C,GAChCwB,EAAaxB,KACd,IAEGuC,EAAuBM,uBAAY,SAAC7C,GACtCuB,EAAevB,KAChB,IAEGsC,EAAoBO,uBAAY,SAAC7C,EACAoF,EACA9E,EACAH,GAI/BA,GACAsB,EAAazB,EAAIM,GAEjBL,EAAc,CAACD,KAAIE,KAAMkF,KAEzBnF,EAAc,CAACD,KAAIE,KAAMkF,MAE9B,IAEG3C,EAAqBI,uBAAY,SAAC7C,EAAYM,GAChDC,EAAe,CAACP,KAAIM,WACrB,IAEH,OACI,0BAAS8C,UAAU,OAAnB,UACI,uBAAOpD,GAAG,aACHoD,UAAU,aACVE,KAAK,WACLG,QAAS0B,IAEhB,uBAAOE,QAAQ,aAAf,mCAEA,oBAAIjC,UAAU,YAAd,SACKjE,EAAakB,KAAI,SAACU,GAAD,OACd,cAAC,EAAD,CACMA,KAAMA,EACNuB,kBAAmBA,EACnBC,qBAAsBA,EACtBC,eAAgBA,EAChBC,mBAAoBA,GALf1B,EAAKf,e,QCrF9BgE,EAAqB,CAACrD,kBAAiBS,oBAM9BsD,eAVS,SAACnF,GAAD,MAAuB,CAC3CN,mBAAoBM,EAAMoF,KAAK1F,sBAW/B+E,EAFWU,EArCqB,SAACE,GAAW,IAEvC3F,EAAyD2F,EAAzD3F,mBAAoB0B,EAAqCiE,EAArCjE,gBAAiBS,EAAoBwD,EAApBxD,iBAE1C6B,qBAAU,WACNa,EAAOmB,GAAG,wBAAwB,YAA4D,IAA1DC,EAAyD,EAAzDA,QAAYV,EAA6C,2BACzFU,EACMvE,IACAS,EAAiB,CAAChC,MAAOoF,EAAKC,eAEzC,IAEH,IAAMa,EAAczC,uBAAY,WJuJhCvB,EAAK,uBAAwB,YIrJ1B,IAEH,OAAO,yBAAQ8B,UAAU,SAAlB,UACH,uBAAMA,UAAU,aAAhB,UAA6B,iCAASnE,IAAtC,gBACA,qBAAImE,UAAU,UAAd,UACI,6BAAI,cAAC,IAAD,CAASmC,gBAAgB,WAAWC,GAAG,QAAvC,mBACJ,6BAAI,cAAC,IAAD,CAASD,gBAAgB,WAAWC,GAAG,UAAvC,sBACJ,6BAAI,cAAC,IAAD,CAASD,gBAAgB,WAAWC,GAAG,aAAvC,4BAER,wBAAQpC,UAAU,kBAAkBK,QAAS6B,EAA7C,mC,OC5BFG,EAAcC,YAAgB,CAChCf,KAAMhG,EAAUgH,UAGdC,EAAaC,YAAqB,CAACC,OAAO,IAEnCC,EAAQC,YAAe,CAChCL,QAASF,EACTG,e,iBCyCE5B,EAAqB,CAACxD,UAASI,iBAAgBQ,oBAOtCsD,eAZS,SAACnF,GAAD,MAAuB,CAC3CP,SAAUO,EAAMoF,KAAK3F,SACrBI,MAAOG,EAAMoF,KAAKvF,SAYlB4E,EAFWU,EAnDqB,SAACE,GACjC,IAAMT,EAAW8B,cACVzF,EAA8DoE,EAA9DpE,QAASI,EAAqDgE,EAArDhE,eAAgBQ,EAAqCwD,EAArCxD,iBAAkBpC,EAAmB4F,EAAnB5F,SAAUI,EAASwF,EAATxF,MAE5D6D,qBAAU,WACNa,EAAOmB,GAAG,sBAAsB,YAA+D,IAA7D3E,EAA4D,EAA5DA,KAAM4E,EAAsD,EAAtDA,QAAYV,EAA0C,kCAEpFL,EADNe,EACetE,EAAe,CAACN,SAChBc,EAAiB,CAAChC,MAAOoF,EAAKC,cAGjDX,EAAOmB,GAAG,oBAAoB,YAA+D,IAA7DC,EAA4D,EAA5DA,QAAS5E,EAAmD,EAAnDA,KAASkE,EAA0C,kCAElFL,EADNe,EACe1E,EAAQ,CAACF,SACTc,EAAiB,CAAChC,MAAOoF,EAAKC,gBAElD,CAACN,IAEJ,IAAM+B,EAAQrD,uBAAY,SAACsD,GACL,UAAdA,EAAMC,KN2IU,SAACpH,GACzBsC,EAAK,eAAgB,OAAQ,CAAChB,KAAMtB,IM5ILqH,CAAarH,KACzC,CAACmF,EAAUnF,IAERsH,EAAQzD,uBAAY,SAACsD,GNwHI,IAACI,IMvHRJ,EAAMK,OAAOzD,MNwHrCzB,EAAK,gBAAiB,MAAO,CAACiF,WMvH3B,CAACpC,IAEJ,OAAO,yBAAQf,UAAS,iBAAYqD,IAAEC,QAA/B,UACH,uCACCtH,GAAS,oBAAGgE,UAAWqD,IAAErH,MAAhB,2BAAsCA,KAChD,uBAAOgE,UAAU,WACVuD,YAAY,yBACZ5D,MAAO/D,EACP0E,QAAS4C,EACTM,UAAWV,EACXW,WAAS,UC/BlBC,EAAM,WACR,OAAO,0BAAS1D,UAAU,UAAnB,UACH,cAAC,EAAD,IACA,cAAC,IAAD,CAAO2D,KAAM,oDAAqDC,OAAQ,kBAAM,cAAC,EAAD,OAChF,cAAC,EAAD,QAaOC,EARC,WACZ,OAAO,cAAC,IAAD,UACH,cAAC,IAAD,CAAUlB,MAAOA,EAAjB,SACI,cAAC,EAAD,SCXGmB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBhD,MAAK,YAAkD,IAA/CiD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASV,OACP,eAAC,IAAMW,WAAP,WACI,cAAC,EAAD,IADJ,OAGAC,SAASC,eAAe,SAM1BX,K,mBCfAY,EAAOC,QAAU,CAAC,MAAQ,sBAAsB,OAAS,yB","file":"static/js/main.b8e2d840.chunk.js","sourcesContent":["import {createSlice, PayloadAction, ThunkAction} from '@reduxjs/toolkit'\r\nimport {FilterType, todoType} from \"../types/types\"\r\n\r\nlet initialState = {\r\n    list: [] as Array<todoType>,\r\n    lastTask: '' as string ,\r\n    countOfActiveTasks: 0 as number,\r\n    filter: 'all' as FilterType,\r\n    filterResult: [] as Array<todoType>,\r\n    error: null as string | null | undefined\r\n}\r\n\r\ntype StateType = typeof initialState\r\n\r\nexport const toDoSlice = createSlice({\r\n    name: 'list',\r\n    initialState,\r\n    reducers: {\r\n        setTodos: (state: StateType, action: PayloadAction<{ list: Array<todoType>, lastTask: string }>): void => {\r\n            state.list = action.payload.list\r\n            state.lastTask = action.payload.lastTask\r\n            state.filterResult = action.payload.list\r\n            state.countOfActiveTasks = action.payload.list.filter((e: todoType) => e.status === 'active').length\r\n            state.error = null\r\n        },\r\n        changeItemStatus: (state: StateType, action: PayloadAction<{ id: number }>): void => {\r\n            let element = state.list.findIndex(e => e.id === action.payload.id)\r\n            state.list[element].status === 'active'\r\n                ? state.list[element].status = 'completed'\r\n                : state.list[element].status = 'active'\r\n            state.countOfActiveTasks = state.list.filter(e => e.status === 'active').length\r\n            state.filterResult = state.list\r\n            state.filter = 'all'\r\n            state.error = null\r\n        },\r\n        changeEditing: (state: StateType, action: PayloadAction<{ case?: boolean | null, id: number | null }>): void => {\r\n            let element = state.list.findIndex(e => e.id === action.payload.id)\r\n            // рассматриваем случай. мы тыкнули в другом месте или сделали двойной клик?\r\n            // если в другом месте, то это false, а если двойной то нулл\r\n            // если мы тыкнули два раза, тогда мы меняем статус редактирования\r\n            // но если мы тыкнули в другом месте то в этом лучаем мы ВСЕГДА просто ВЫКЛЮЧАЕМ редактирование\r\n            action.payload.case === false\r\n                ? state.list[element].editing = false\r\n                : state.list[element].editing = !state.list[element].editing\r\n            state.filterResult = state.list\r\n        },\r\n        setChangedTask: (state: StateType, action: PayloadAction<{ id: number, task: string }>): void => {\r\n            state.list = state.list.map(e => e.id === action.payload.id ? {...e, task: action.payload.task} : e)\r\n            state.filterResult = state.list\r\n        },\r\n        changeItemTask: (state: StateType, action: PayloadAction<{ id: number, task: string }>): void => {\r\n            let element = state.list.findIndex(e => e.id === action.payload.id)\r\n            state.list[element].task = action.payload.task\r\n            state.filterResult = state.list\r\n            state.error = null\r\n        },\r\n        addItem: (state: StateType, action: PayloadAction<{ task: string }>): void => {\r\n            if (state.lastTask !== '') {\r\n                let id = state.list.length > 0 ? state.list[state.list.length - 1].id + 1 : 1\r\n                state.list.push({id: id, task: action.payload.task, status: 'active', editing: false})\r\n                state.lastTask = ''\r\n                state.countOfActiveTasks += 1\r\n                state.filterResult = state.list\r\n                state.filter = 'all'\r\n            }\r\n            state.error = null\r\n        },\r\n        deleteItem: (state: StateType, action: PayloadAction<{ id: number }>): void => {\r\n            state.list = state.list.filter(e => e.id !== action.payload.id)\r\n            state.countOfActiveTasks = state.list.filter(e => e.status === 'active').length\r\n            state.filterResult = state.list\r\n            state.filter = 'all'\r\n            state.error = null\r\n        },\r\n        deleteCompleted: (state: StateType): void => {\r\n            state.list = state.list.filter(e => e.status !== 'completed')\r\n            state.filterResult = state.list\r\n            state.error = null\r\n        },\r\n        changeLastTask: (state: StateType, action: PayloadAction<{ task: string }>): void => {\r\n            state.lastTask = action.payload.task\r\n            state.error = null\r\n        },\r\n        completedAll: (state: StateType): void => {\r\n            if (state.list.every(item => item.status === 'active') ||\r\n                state.list.some(item => item.status === 'active')) {\r\n                state.list.forEach((item) => {\r\n                    item.status = 'completed'\r\n                })\r\n                state.countOfActiveTasks = 0\r\n            } else {\r\n                state.list.forEach((item) => {\r\n                    item.status = 'active'\r\n                })\r\n                state.countOfActiveTasks = state.list.length\r\n            }\r\n            state.filterResult = state.list\r\n            state.error = null\r\n        },\r\n        changeFilter: (state: StateType, action: PayloadAction<{ filter: FilterType, id: number | null }>): void => {\r\n            switch (action.payload.filter) {\r\n                case 'all' :\r\n                    state.filterResult = state.list\r\n                    state.filter = 'all'\r\n                    break\r\n                case 'active' :\r\n                    state.filterResult = state.list.filter(el => el.status !== 'completed')\r\n                    state.filter = 'active'\r\n                    break\r\n                case 'completed' :\r\n                    state.filterResult = state.list.filter(el => el.status !== 'active')\r\n                    state.filter = 'completed'\r\n                    break\r\n                case 'item' :\r\n                    state.filterResult = state.list.filter(el => el.id === action.payload.id)\r\n                    state.filter = 'all'\r\n                    break\r\n                default:\r\n                    return\r\n            }\r\n            state.countOfActiveTasks = state.list.filter(el => el.status === 'active').length\r\n            state.error = null\r\n        },\r\n        setErrorResponse: (state: StateType, action: PayloadAction<{ error: string | null | undefined }>): void => {\r\n            state.error = action.payload.error\r\n        }\r\n    }\r\n})\r\n\r\nexport const getUsersTC =\r\n    (filter: FilterType,\r\n     id: null | number = null,\r\n     editingMode: boolean | null = null): ThunkAction<void, StateType, unknown, any> =>\r\n        (dispatch) => {\r\n            ajax('/api/all', 'GET').then(response => {\r\n                const resultPromise = response.json()\r\n                if (response.status === 200) {\r\n                    resultPromise.then(data => {\r\n                        dispatch(setTodos({list: data.list, lastTask: data.lastTask}))\r\n                        dispatch(changeFilter({filter, id}))\r\n                        if (editingMode) dispatch(changeEditing({id}))\r\n                    })\r\n                } else {\r\n                    resultPromise.then(data => {\r\n                        dispatch(setErrorResponse({error: data.message}))\r\n                    })\r\n                }\r\n            })\r\n        }\r\n\r\nexport const updateLastMessageTC = (text: string): void => {\r\n    ajax('/api/lastTask', 'PUT', {text})\r\n}\r\n\r\nexport const completeAllTC = (): void => {\r\n    ajax('/api/completeAll', 'GET')\r\n}\r\n\r\nexport const changeStatusTC = (id: number): void => {\r\n    ajax('/api/changeTodo', 'PUT', {id})\r\n}\r\n\r\nexport const deleteTodoTC = (id: number): void => {\r\n    ajax('/api/changeTodo', 'DELETE', {id})\r\n}\r\n\r\nexport const addNewTodoTC = (lastTask: string): void => {\r\n    ajax('/api/newTodo', 'POST', {task: lastTask})\r\n}\r\n\r\nexport const deleteCompletedTC = (): void => {\r\n    ajax('/api/deleteCompleted', 'DELETE')\r\n}\r\n\r\nexport const changeTodoTC = (id: number, task: string): void => {\r\n    ajax('/api/changeTodo', 'POST', {id, task})\r\n}\r\n\r\ntype HttpMethodsType = 'GET' | 'PUT' | 'POST' | 'DELETE'\r\n\r\ninterface SettingsType {\r\n    method: HttpMethodsType\r\n    headers: { \"X-Requested-With\": \"XMLHttpRequest\", \"Content-Type\": \"application/json\" }\r\n\r\n    [body: string]: { [key: string]: string | number } | string\r\n}\r\n\r\nlet ajax = (url: string, method: HttpMethodsType, body = {}): Promise<Response> => {\r\n    let settings: SettingsType = {\r\n        method,\r\n        headers: {\"X-Requested-With\": \"XMLHttpRequest\", \"Content-Type\": \"application/json\"}\r\n    }\r\n    if (Object.keys(body).length !== 0) settings['body'] = JSON.stringify(body)\r\n    return fetch(url, settings)\r\n}\r\n\r\nexport const {\r\n    setTodos,\r\n    changeItemStatus,\r\n    changeItemTask,\r\n    changeEditing,\r\n    setChangedTask,\r\n    addItem,\r\n    deleteItem,\r\n    deleteCompleted,\r\n    changeLastTask,\r\n    completedAll,\r\n    changeFilter,\r\n    setErrorResponse\r\n} = toDoSlice.actions\r\n","import React, {ChangeEvent, useCallback, useEffect} from 'react'\r\nimport {todoType} from \"../types/types\"\r\n\r\ninterface PropsType {\r\n    item: todoType\r\n    changeEditingCall: (id: number, itemCase: boolean | null, task: string, editing: boolean) => void\r\n    changeItemStatusCall: (id: number) => void\r\n    deleteItemCall: (id: number) => void\r\n    changeItemTaskCall: (id: number, task: string) => void\r\n}\r\n\r\nconst Item: React.FC<PropsType> = ({item, changeEditingCall, changeItemStatusCall, deleteItemCall, changeItemTaskCall}) => {\r\n    const input = React.createRef<HTMLInputElement>()\r\n\r\n    const changeEditing = useCallback((e: React.MouseEvent<HTMLInputElement>): void => {\r\n        changeEditingCall(item.id, null, e.currentTarget.value, item.editing)\r\n    }, [changeEditingCall, item])\r\n\r\n    const changeItemStatus = useCallback((): void => {\r\n        changeItemStatusCall(item.id)\r\n    }, [changeItemStatusCall, item])\r\n\r\n    const deleteItem = useCallback((): void => {\r\n        deleteItemCall(item.id)\r\n    }, [deleteItemCall, item])\r\n\r\n    const changeItemTask = useCallback((e: ChangeEvent<HTMLInputElement>): void => {\r\n        changeItemTaskCall(item.id, e.currentTarget.value)\r\n    }, [changeItemTaskCall, item])\r\n\r\n    const changeEditingBlurCase = useCallback((e: React.FocusEvent<HTMLInputElement>): void => {\r\n        // это случай нажатия в другом месте.\r\n        changeEditingCall(item.id, false, e.currentTarget.value, item.editing)\r\n    }, [changeEditingCall, item])\r\n\r\n    useEffect((): void => {\r\n        if (input.current) input.current.focus()\r\n    }, [input])\r\n\r\n    return <li className={item.status === 'completed'\r\n        ? (item.editing ? 'completed editing' : 'completed')\r\n        : (item.editing ? 'editing' : undefined)}>\r\n        <div className=\"view\">\r\n            <input className=\"toggle\"\r\n                   type=\"checkbox\"\r\n                   checked={item.status === \"completed\"}\r\n                   onChange={changeItemStatus}\r\n            />\r\n            <label>{item.task}</label>\r\n            <button className=\"destroy\" onClick={deleteItem}></button>\r\n        </div>\r\n        <input className=\"edit\"\r\n               value={item.task}\r\n               onInput={changeItemTask}\r\n               onBlur={changeEditingBlurCase}\r\n               ref={input}\r\n               onDoubleClick={changeEditing}\r\n        />\r\n    </li>\r\n}\r\n\r\nexport default Item","import io from \"socket.io-client\";\r\n\r\nconst socket = io(\"http://localhost:8000/\"); // для подключения к сеерверу\r\n\r\nexport default socket;","import React, {useCallback, useEffect} from 'react'\r\nimport {\r\n    changeEditing,\r\n    changeItemStatus,\r\n    changeItemTask,\r\n    changeStatusTC,\r\n    changeTodoTC,\r\n    completeAllTC,\r\n    completedAll,\r\n    deleteItem,\r\n    deleteTodoTC,\r\n    getUsersTC,\r\n    setChangedTask,\r\n    setErrorResponse\r\n} from \"../store/todoReducer\"\r\nimport {connect} from \"react-redux\"\r\nimport {useParams} from 'react-router-dom'\r\nimport Item from \"./Item\"\r\nimport socket from \"../webSocket\"\r\nimport {StateType} from \"../store\"\r\nimport {FilterType, mainRespType, todoType} from \"../types/types\"\r\n\r\ninterface IUri {\r\n    filter: FilterType\r\n    num: string\r\n    edit: 'edit'\r\n}\r\n\r\nconst Main: React.FC<PropsType> = (props) => {\r\n    const {\r\n        filterResult, changeEditing, changeItemStatus, changeItemTask,\r\n        completedAll, deleteItem, getUsersTC, setChangedTask, setErrorResponse\r\n    } = props\r\n\r\n    const {filter, num, edit} = useParams<IUri>()\r\n\r\n    useEffect((): void => {\r\n        switch (filter) {\r\n            case 'todo':\r\n                if (num && !edit) {\r\n                    getUsersTC('item', Number(num))\r\n                } else if (num && edit) {\r\n                    getUsersTC('item', Number(num), true)\r\n                } else {\r\n                    getUsersTC('all')\r\n                }\r\n                break\r\n            case undefined:\r\n                getUsersTC('all')\r\n                break\r\n            default:\r\n                getUsersTC(filter)\r\n        }\r\n    }, [edit, num, filter])\r\n\r\n    useEffect((): void => {\r\n        socket.on('all:wasCompleted', ({success, ...data}: Omit<mainRespType, 'task' | 'id'>) => {\r\n            success\r\n                ? completedAll()\r\n                : setErrorResponse({error: data.message})\r\n        })\r\n\r\n        socket.on('todo:wasDeleted', ({id, success, ...data}: Omit<mainRespType, 'task'>) => {\r\n            success\r\n                ? deleteItem({id})\r\n                : setErrorResponse({error: data.message})\r\n        })\r\n\r\n        socket.on('todoStatus:wasChanged', ({id, success, ...data}: Omit<mainRespType, 'task'>) => {\r\n            success\r\n                ? changeItemStatus({id})\r\n                : setErrorResponse({error: data.message})\r\n        })\r\n\r\n        socket.on('todo:wasChanged', ({success, id, task, ...data}: mainRespType) => {\r\n            success\r\n                ? setChangedTask({id, task})\r\n                : setErrorResponse({error: data.message})\r\n        })\r\n    }, [])\r\n\r\n    const completedAllCall = useCallback((): void => {\r\n        completeAllTC()\r\n    }, [])\r\n\r\n    const deleteItemCall = useCallback((id: number): void => {\r\n        deleteTodoTC(id)\r\n    }, [])\r\n\r\n    const changeItemStatusCall = useCallback((id: number): void => {\r\n        changeStatusTC(id)\r\n    }, [])\r\n\r\n    const changeEditingCall = useCallback((id: number,\r\n                                           itemCase: boolean | null,\r\n                                           task: string,\r\n                                           editing: boolean): void => {\r\n        // мы передаем статус редактирования (editing), чтобы понять, мы его в данный момент выключаем или включаем\r\n        // если мы его включаем тогда просто меняем статус редактирования (на влючено)\r\n        //  но если мы его выключаем то тогда мы делаем запрос на изменения данных на сервере (сохранение)\r\n        if (editing) {\r\n            changeTodoTC(id, task)\r\n            // выключаем редактирование у себя\r\n            changeEditing({id, case: itemCase})\r\n        } else {\r\n            changeEditing({id, case: itemCase})\r\n        }\r\n    }, [])\r\n\r\n    const changeItemTaskCall = useCallback((id: number, task: string): void => {\r\n        changeItemTask({id, task})\r\n    }, [])\r\n\r\n    return (\r\n        <section className=\"main\">\r\n            <input id=\"toggle-all\"\r\n                   className=\"toggle-all\"\r\n                   type=\"checkbox\"\r\n                   onClick={completedAllCall}\r\n            />\r\n            <label htmlFor=\"toggle-all\"> Mark all as complete\r\n            </label>\r\n            <ul className=\"todo-list\">\r\n                {filterResult.map((item: todoType) => (\r\n                    <Item key={item.id}\r\n                          item={item}\r\n                          changeEditingCall={changeEditingCall}\r\n                          changeItemStatusCall={changeItemStatusCall}\r\n                          deleteItemCall={deleteItemCall}\r\n                          changeItemTaskCall={changeItemTaskCall}/>\r\n                ))}\r\n            </ul>\r\n        </section>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: StateType): StateToProps => ({\r\n    filterResult: state.toDo.filterResult\r\n})\r\ntype StateToProps = { filterResult: [] | Array<todoType> }\r\n\r\nconst mapDispatchToProps = {\r\n    changeEditing, changeItemStatus, changeItemTask,\r\n    changeStatusTC, changeTodoTC, completeAllTC, deleteTodoTC, getUsersTC,\r\n    completedAll, deleteItem, setChangedTask, setErrorResponse\r\n}\r\n\r\ntype ChangeEditingTypeObj = { case?: boolean | null, id: number | null }\r\ntype changeItemStatusTypeObj = { id: number }\r\ntype changeItemTaskTypeObj = { id: number, task: string }\r\ntype setErrorResponseTypeObj = { error: string | undefined }\r\n\r\ntype DispatchToPropsType = {\r\n    changeEditing: ({}: ChangeEditingTypeObj) => void\r\n    changeItemStatus: ({}: changeItemStatusTypeObj) => void\r\n    changeItemTask: ({}: changeItemTaskTypeObj) => void\r\n    completedAll: () => void\r\n    deleteItem: ({}: changeItemStatusTypeObj) => void\r\n    getUsersTC: (filter: FilterType, id?: number, editingMode?: boolean) => void\r\n    setChangedTask: ({}: changeItemTaskTypeObj) => void\r\n    setErrorResponse: ({}: setErrorResponseTypeObj) => void\r\n}\r\ntype PropsType = StateToProps & DispatchToPropsType\r\n\r\nexport default connect<StateToProps, DispatchToPropsType, null, StateType>(mapStateToProps, mapDispatchToProps)(Main)","import React, {useCallback, useEffect} from 'react'\r\nimport {connect} from \"react-redux\"\r\nimport {deleteCompleted, deleteCompletedTC, setErrorResponse} from \"../store/todoReducer\"\r\nimport {NavLink} from \"react-router-dom\"\r\nimport socket from \"../webSocket\"\r\nimport {mainRespType} from '../types/types'\r\nimport {StateType} from \"../store\"\r\n\r\nconst Footer: React.FC<PropsType> = (props) => {\r\n\r\n    let {countOfActiveTasks, deleteCompleted, setErrorResponse} = props\r\n\r\n    useEffect((): void => {\r\n        socket.on('completed:wasDeleted', ({success, ...data}: Omit<mainRespType, 'id' | 'task'>) => {\r\n            success\r\n                ? deleteCompleted()\r\n                : setErrorResponse({error: data.message})\r\n        })\r\n    }, [])\r\n\r\n    const completeAll = useCallback((): void => {\r\n        deleteCompletedTC()\r\n    }, [])\r\n\r\n    return <footer className=\"footer\">\r\n        <span className=\"todo-count\"><strong>{countOfActiveTasks}</strong> item left</span>\r\n        <ul className=\"filters\">\r\n            <li><NavLink activeClassName=\"selected\" to='/todo'>All</NavLink></li>\r\n            <li><NavLink activeClassName=\"selected\" to='/active'>Active</NavLink></li>\r\n            <li><NavLink activeClassName=\"selected\" to='/completed'>Completed</NavLink></li>\r\n        </ul>\r\n        <button className=\"clear-completed\" onClick={completeAll}>Clear completed</button>\r\n    </footer>\r\n}\r\n\r\nconst mapStateToProps = (state: StateType) => ({\r\n    countOfActiveTasks: state.toDo.countOfActiveTasks\r\n})\r\n\r\nconst mapDispatchToProps = {deleteCompleted, setErrorResponse}\r\n\r\ntype DispatchToPropsType = typeof mapDispatchToProps\r\ntype StateToPropsType = ReturnType<typeof mapStateToProps>\r\ntype PropsType = StateToPropsType & DispatchToPropsType\r\n\r\nexport default connect<StateToPropsType, DispatchToPropsType, null, StateType>(\r\n    mapStateToProps,\r\n    mapDispatchToProps)(Footer)\r\n","import {combineReducers, configureStore, getDefaultMiddleware} from '@reduxjs/toolkit'\r\nimport {toDoSlice} from \"./todoReducer\"\r\n\r\nconst rootReducer = combineReducers({\r\n    toDo: toDoSlice.reducer,\r\n})\r\n\r\nconst middleware = getDefaultMiddleware({thunk: true})\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware\r\n})\r\n\r\nexport type StateType = ReturnType<typeof store.getState>\r\nexport type DispatchType = typeof store.dispatch","import React, {ChangeEvent, KeyboardEventHandler, useCallback, useEffect} from \"react\"\r\nimport {connect, useDispatch} from \"react-redux\"\r\nimport {addItem, addNewTodoTC, changeLastTask, setErrorResponse, updateLastMessageTC} from \"../store/todoReducer\"\r\nimport s from './Header.module.css'\r\nimport socket from \"../webSocket\"\r\nimport {StateType} from \"../store\"\r\nimport {mainRespType} from \"../types/types\"\r\n\r\nconst Header: React.FC<PropsType> = (props) => {\r\n    const dispatch = useDispatch()\r\n    const {addItem, changeLastTask, setErrorResponse, lastTask, error} = props\r\n\r\n    useEffect((): void => {\r\n        socket.on('newTodo:wasChanged', ({task, success, ...data}: Omit<mainRespType, 'id'>): void => {\r\n            success\r\n                ? dispatch(changeLastTask({task}))\r\n                : dispatch(setErrorResponse({error: data.message}))\r\n        })\r\n\r\n        socket.on('newTodo:wasAdded', ({success, task, ...data}: Omit<mainRespType, 'id'>): void => {\r\n            success\r\n                ? dispatch(addItem({task}))\r\n                : dispatch(setErrorResponse({error: data.message}))\r\n        })\r\n    }, [dispatch])\r\n\r\n    const onKey = useCallback((event: React.KeyboardEvent<HTMLInputElement>): void => {\r\n        if (event.key === \"Enter\") addNewTodoTC(lastTask)\r\n    }, [dispatch, lastTask])\r\n\r\n    const Input = useCallback((event: ChangeEvent<HTMLInputElement>): void => {\r\n        updateLastMessageTC(event.target.value)\r\n    }, [dispatch])\r\n\r\n    return <header className={`header ${s.header}`}>\r\n        <h1>todos</h1>\r\n        {error && <p className={s.error}>Server error: {error}</p>}\r\n        <input className=\"new-todo\"\r\n               placeholder=\"What needs to be done?\"\r\n               value={lastTask}\r\n               onInput={Input}\r\n               onKeyDown={onKey}\r\n               autoFocus\r\n        />\r\n    </header>\r\n}\r\n\r\nconst mapStateToProps = (state: StateType) => ({\r\n    lastTask: state.toDo.lastTask,\r\n    error: state.toDo.error\r\n})\r\n\r\nconst mapDispatchToProps = {addItem, changeLastTask, setErrorResponse}\r\n\r\ntype StatePropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = typeof mapDispatchToProps\r\n\r\ntype PropsType = StatePropsType & DispatchPropsType\r\n\r\nexport default connect<StatePropsType, DispatchPropsType, null, StateType>(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Header)\r\n\r\n","import React from \"react\";\r\nimport './css/index.css';\r\nimport './css/base.css';\r\nimport Main from \"./components/Main\";\r\nimport Footer from \"./components/Footer\";\r\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./store\";\r\nimport Header from \"./components/Header\";\r\n\r\n\r\nconst App = () => {\r\n    return <section className=\"todoapp\">\r\n        <Header/>\r\n        <Route path={'/:filter(active|all|completed|todo)?/:num?/:edit?'} render={() => <Main/>}/>\r\n        <Footer/>\r\n    </section>\r\n}\r\n\r\n\r\nconst MainApp = () => {\r\n    return <Router>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </Router>\r\n}\r\n\r\nexport default MainApp;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport MainApp from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <MainApp/>,\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"Header_error__1X_7W\",\"header\":\"Header_header__h8UIr\"};"],"sourceRoot":""}